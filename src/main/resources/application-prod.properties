# ---------- 1. Service basics ----------
spring.application.name=adaptive-learning-backend

# Render injects $PORT ? map it or fall back to 8080 locally
server.port=${PORT:8080}

# ---------- 2. PostgreSQL (Render) ----------
# Render?s Postgres service exposes four env-vars in the *Connections* tab:
#   DATABASE_URL        = postgresql://user:pass@host:5432/db
#   DATABASE_USER
#   DATABASE_PASSWORD
#
# We need the JDBC flavour, so add one more var in Render called  JDBC_DATABASE_URL
# whose value is identical to DATABASE_URL but with a ?jdbc:? prefix.
#
spring.datasource.url=${JDBC_DATABASE_URL}
spring.datasource.username=${DATABASE_USER}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# use Flyway for real migrations later
spring.jpa.hibernate.ddl-auto=validate
# stdout logs get noisy on Render
spring.jpa.show-sql=false

# ---------- 3. Python AI micro-service ----------
python.service.baseurl=${AI_BASE_URL}

# ---------- 4. CORS origins ----------
frontend.origin=${FRONTEND_ORIGIN}

# ---------- 5. Actuator (health checks) ----------
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=never

# ---------- 6. JWT ----------
jwt.secret=${JWT_SECRET}
jwt.expiration-ms=${JWT_EXPIRATION_MS:8640000000}
